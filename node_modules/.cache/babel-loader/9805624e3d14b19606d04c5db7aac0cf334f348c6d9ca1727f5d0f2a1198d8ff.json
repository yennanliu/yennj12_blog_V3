{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yennanliu/yennj12_blog_V3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yennanliu/yennj12_blog_V3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    currentPost: null,\n    loading: false,\n    error: null\n  },\n  mutations: {\n    SET_POSTS: function SET_POSTS(state, posts) {\n      state.posts = posts;\n    },\n    SET_CURRENT_POST: function SET_CURRENT_POST(state, post) {\n      state.currentPost = post;\n    },\n    SET_LOADING: function SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR: function SET_ERROR(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    fetchPosts: function fetchPosts(_ref) {\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var commit, posts;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              commit('SET_LOADING', true);\n              try {\n                // TODO: Implement API call to fetch posts\n                posts = [];\n                commit('SET_POSTS', posts);\n              } catch (error) {\n                commit('SET_ERROR', error.message);\n              } finally {\n                commit('SET_LOADING', false);\n              }\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    fetchPost: function fetchPost(_ref2, id) {\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var commit, post;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              commit('SET_LOADING', true);\n              try {\n                // TODO: Implement API call to fetch single post\n                post = null; // This will be replaced with actual API call using the id\n                commit('SET_CURRENT_POST', post);\n              } catch (error) {\n                commit('SET_ERROR', error.message);\n              } finally {\n                commit('SET_LOADING', false);\n              }\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  getters: {\n    getPosts: function getPosts(state) {\n      return state.posts;\n    },\n    getCurrentPost: function getCurrentPost(state) {\n      return state.currentPost;\n    },\n    isLoading: function isLoading(state) {\n      return state.loading;\n    },\n    getError: function getError(state) {\n      return state.error;\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","posts","currentPost","loading","error","mutations","SET_POSTS","SET_CURRENT_POST","post","SET_LOADING","SET_ERROR","actions","fetchPosts","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commit","wrap","_callee$","_context","prev","next","message","stop","fetchPost","_ref2","id","_callee2","_callee2$","_context2","getters","getPosts","getCurrentPost","isLoading","getError"],"sources":["/Users/yennanliu/yennj12_blog_V3/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    currentPost: null,\n    loading: false,\n    error: null\n  },\n  mutations: {\n    SET_POSTS(state, posts) {\n      state.posts = posts\n    },\n    SET_CURRENT_POST(state, post) {\n      state.currentPost = post\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    }\n  },\n  actions: {\n    async fetchPosts({ commit }) {\n      commit('SET_LOADING', true)\n      try {\n        // TODO: Implement API call to fetch posts\n        const posts = []\n        commit('SET_POSTS', posts)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    async fetchPost({ commit }, id) {\n      commit('SET_LOADING', true)\n      try {\n        // TODO: Implement API call to fetch single post\n        const post = null // This will be replaced with actual API call using the id\n        commit('SET_CURRENT_POST', post)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    }\n  },\n  getters: {\n    getPosts: state => state.posts,\n    getCurrentPost: state => state.currentPost,\n    isLoading: state => state.loading,\n    getError: state => state.error\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}